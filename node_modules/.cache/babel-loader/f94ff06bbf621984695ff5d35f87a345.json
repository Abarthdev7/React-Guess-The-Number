{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abart\\\\Desktop\\\\React-Guess-The-Number\\\\src\\\\components\\\\mainStr\\\\Content.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretNumber = Math.floor(Math.random() * 99) + 1;\n\nfunction Content(props) {\n  _s();\n\n  let [score, setScore] = useState(20);\n  const [highScore, setHighScore] = useState('0');\n  const [message, setMessage] = useState('Start guessing . . .');\n  const [guess, setGuess] = useState('');\n  const [disable, setDisable] = useState(false);\n  const applyWhat = props.applyWhat;\n  let highScoreDisplay = 0;\n\n  const inputHandler = event => {\n    //Gets the input from the user\n    setGuess(event.target.value);\n  };\n\n  const disableBtn = () => {\n    //Disables the buttons and input field\n    setDisable(true);\n  };\n\n  const check = () => {\n    if (guess <= 0 || guess > 99) {\n      setMessage('No Number!');\n      return score;\n    } else if (secretNumber == guess) {\n      setMessage('🏆 Correct! The number is : ' + guess);\n      disableBtn();\n      applyWhat(guess);\n\n      if (score > highScoreDisplay) {\n        highScoreDisplay = score;\n        setHighScore(highScoreDisplay);\n      }\n\n      return score;\n    } else if (guess > secretNumber) {\n      if (score < 2) {\n        setMessage('You Lost The Game!');\n        disableBtn();\n        return score = 0;\n      } else {\n        setMessage('📉 Too high!');\n        return score - 1;\n      }\n    } else if (guess < secretNumber) {\n      if (score < 2) {\n        setMessage('You Lost The Game!');\n        disableBtn();\n        return score = 0;\n      } else setMessage('📈 Too low!');\n\n      return score - 1;\n    }\n  };\n\n  const checkHandler = () => {\n    setScore(check);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"left\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        className: \"guess\",\n        disabled: disable,\n        onChange: inputHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        disabled: disable,\n        onClick: checkHandler,\n        children: \"Check!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"right\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label-score\",\n        children: [props.score, \" \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"label-score\",\n        children: [props.highscore, \" \", highScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Content, \"tPgzuNzM/+PgIYo9dPzo0k5Ye/s=\");\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["C:/Users/abart/Desktop/React-Guess-The-Number/src/components/mainStr/Content.jsx"],"names":["React","useState","secretNumber","Math","floor","random","Content","props","score","setScore","highScore","setHighScore","message","setMessage","guess","setGuess","disable","setDisable","applyWhat","highScoreDisplay","inputHandler","event","target","value","disableBtn","check","checkHandler","highscore"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst secretNumber = Math.floor(Math.random() * 99) + 1\r\n\r\n\r\nfunction Content(props) {\r\n    let [score, setScore] = useState(20)\r\n    const [highScore, setHighScore] = useState('0');\r\n    const [message, setMessage] = useState('Start guessing . . .');\r\n    const [guess, setGuess] = useState('');\r\n    const [disable, setDisable] = useState(false);\r\n    const applyWhat = props.applyWhat\r\n    let highScoreDisplay = 0\r\n\r\n\r\n    const inputHandler = (event) => {  //Gets the input from the user\r\n        setGuess(event.target.value)\r\n    }\r\n\r\n    const disableBtn = () => { //Disables the buttons and input field\r\n        setDisable(true)\r\n    }\r\n\r\n    const check = () => {\r\n        if (guess <= 0 || guess > 99) {\r\n            setMessage('No Number!')\r\n            return score\r\n        } else if (secretNumber == guess) {\r\n            setMessage('🏆 Correct! The number is : ' + guess)\r\n            disableBtn()\r\n            applyWhat(guess)\r\n\r\n            if (score > highScoreDisplay) {\r\n                highScoreDisplay = score\r\n                setHighScore(highScoreDisplay)\r\n            }\r\n            return score\r\n            \r\n        } else if (guess > secretNumber) {\r\n            if (score < 2) {\r\n                setMessage('You Lost The Game!')\r\n                disableBtn()\r\n                return score = 0\r\n            } else {\r\n                setMessage('📉 Too high!')\r\n                return score - 1\r\n            }\r\n        } else if (guess < secretNumber) {\r\n            if (score < 2) {\r\n                setMessage('You Lost The Game!')\r\n                disableBtn()\r\n                return score = 0\r\n            } else\r\n                setMessage('📈 Too low!')\r\n            return score - 1\r\n        }\r\n    }\r\n\r\n    const checkHandler = () => {\r\n        setScore(check)\r\n    }\r\n\r\n    return (\r\n        <main className='main-content'>\r\n\r\n            <section className='left'>\r\n                <input type=\"number\" className='guess' disabled={disable} onChange={inputHandler} />\r\n                <button className='btn' disabled={disable} onClick={checkHandler}>Check!</button>\r\n            </section>\r\n\r\n            <section className='right'>\r\n                <p className='message'>{message}</p>\r\n                <p className='label-score'>{props.score} {score}</p>\r\n                <p className='label-score'>{props.highscore} {highScore}</p>\r\n            </section>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Content;\r\n"]},"metadata":{},"sourceType":"module"}